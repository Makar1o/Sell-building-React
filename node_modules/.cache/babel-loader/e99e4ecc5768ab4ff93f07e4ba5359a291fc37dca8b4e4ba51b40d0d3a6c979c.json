{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport data from \"../data/properties.json\";\nexport function useFilters() {\n  _s();\n  const [properties] = useState(data);\n  const [filtered, setFiltered] = useState([]);\n  const [visibleCount, setVisibleCount] = useState(6);\n  const [filters, setFilters] = useState({\n    transaction: \"\",\n    type: \"\",\n    searchTerm: \"\",\n    minPrice: 0,\n    maxPrice: 100000,\n    minSize: 0,\n    maxSize: 500,\n    amenities: [],\n    sort: \"newest\"\n  });\n  useEffect(() => {\n    let result = properties.filter(p => {\n      const matchesTransaction = !filters.transaction || p.transaction === filters.transaction;\n      const matchesType = !filters.type || p.type === filters.type;\n      const matchesSearch = !filters.searchTerm || p.title.toLowerCase().includes(filters.searchTerm.toLowerCase()) || p.location.toLowerCase().includes(filters.searchTerm.toLowerCase());\n      const matchesPrice = p.price >= filters.minPrice && p.price <= filters.maxPrice;\n      const matchesSize = p.size >= filters.minSize && p.size <= filters.maxSize;\n      const matchesAmenities = filters.amenities.every(a => p.amenities.includes(a));\n      return matchesTransaction && matchesType && matchesSearch && matchesPrice && matchesSize && matchesAmenities;\n    });\n    switch (filters.sort) {\n      case \"price-asc\":\n        result.sort((a, b) => a.price - b.price);\n        break;\n      case \"price-desc\":\n        result.sort((a, b) => b.price - a.price);\n        break;\n      case \"newest\":\n        result.sort((a, b) => new Date(b.dateAdded).getTime() - new Date(a.dateAdded).getTime());\n        break;\n    }\n    setFiltered(result);\n  }, [filters, properties]);\n  return {\n    filtered: filtered.slice(0, visibleCount),\n    totalCount: filtered.length,\n    visibleCount,\n    showMore: () => setVisibleCount(c => c + 6),\n    setFilters,\n    resetFilters: () => setFilters({\n      transaction: \"\",\n      type: \"\",\n      searchTerm: \"\",\n      minPrice: 0,\n      maxPrice: 100000,\n      minSize: 0,\n      maxSize: 500,\n      amenities: [],\n      sort: \"newest\"\n    })\n  };\n}\n_s(useFilters, \"erVm4VkbNW2Yf68EGEAs9JhkSMI=\");","map":{"version":3,"names":["useState","useEffect","data","useFilters","_s","properties","filtered","setFiltered","visibleCount","setVisibleCount","filters","setFilters","transaction","type","searchTerm","minPrice","maxPrice","minSize","maxSize","amenities","sort","result","filter","p","matchesTransaction","matchesType","matchesSearch","title","toLowerCase","includes","location","matchesPrice","price","matchesSize","size","matchesAmenities","every","a","b","Date","dateAdded","getTime","slice","totalCount","length","showMore","c","resetFilters"],"sources":["E:/arhive/sell-building-react/src/hooks/useFilters.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport data from \"../data/properties.json\";\r\nimport Property from \"../types/Property\";\r\n\r\nexport function useFilters() {\r\n  const [properties] = useState<Property[]>(data as Property[]);\r\n  const [filtered, setFiltered] = useState<Property[]>([]);\r\n  const [visibleCount, setVisibleCount] = useState(6);\r\n\r\n  const [filters, setFilters] = useState({\r\n    transaction: \"\",\r\n    type: \"\",\r\n    searchTerm: \"\",\r\n    minPrice: 0,\r\n    maxPrice: 100000,\r\n    minSize: 0,\r\n    maxSize: 500,\r\n    amenities: [] as string[],\r\n    sort: \"newest\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    let result = properties.filter((p) => {\r\n      const matchesTransaction =\r\n        !filters.transaction || p.transaction === filters.transaction;\r\n      const matchesType = !filters.type || p.type === filters.type;\r\n      const matchesSearch =\r\n        !filters.searchTerm ||\r\n        p.title.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||\r\n        p.location.toLowerCase().includes(filters.searchTerm.toLowerCase());\r\n      const matchesPrice =\r\n        p.price >= filters.minPrice && p.price <= filters.maxPrice;\r\n      const matchesSize =\r\n        p.size >= filters.minSize && p.size <= filters.maxSize;\r\n      const matchesAmenities = filters.amenities.every((a) =>\r\n        p.amenities.includes(a)\r\n      );\r\n\r\n      return (\r\n        matchesTransaction &&\r\n        matchesType &&\r\n        matchesSearch &&\r\n        matchesPrice &&\r\n        matchesSize &&\r\n        matchesAmenities\r\n      );\r\n    });\r\n\r\n    switch (filters.sort) {\r\n      case \"price-asc\":\r\n        result.sort((a, b) => a.price - b.price);\r\n        break;\r\n      case \"price-desc\":\r\n        result.sort((a, b) => b.price - a.price);\r\n        break;\r\n      case \"newest\":\r\n        result.sort(\r\n          (a, b) =>\r\n            new Date(b.dateAdded).getTime() - new Date(a.dateAdded).getTime()\r\n        );\r\n        break;\r\n    }\r\n\r\n    setFiltered(result);\r\n  }, [filters, properties]);\r\n\r\n  return {\r\n    filtered: filtered.slice(0, visibleCount),\r\n    totalCount: filtered.length,\r\n    visibleCount,\r\n    showMore: () => setVisibleCount((c) => c + 6),\r\n    setFilters,\r\n    resetFilters: () =>\r\n      setFilters({\r\n        transaction: \"\",\r\n        type: \"\",\r\n        searchTerm: \"\",\r\n        minPrice: 0,\r\n        maxPrice: 100000,\r\n        minSize: 0,\r\n        maxSize: 500,\r\n        amenities: [],\r\n        sort: \"newest\",\r\n      }),\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}